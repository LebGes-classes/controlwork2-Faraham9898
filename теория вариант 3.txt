Теория Вариант 3
1) Ну это такой класс, для его создания указывается abstract. Этот класс нужен для того чтоб в наследуемые от него классы передавать его методы. Он служит неким макетом для создания разных похожих классов которые будут наследоваться от этого абстрактного. Например мы создадим абстрактный класс animal который будет сожержать методы отвечающие за например количество лап, наличие хвоста или шерсти. Эти "характеристики" мы будем использовать при создании других классов с конкретными животными. 
2) Интерфейс может быть только публичным (вроде), абстрактный класс наследуется от класса и интерфейсов, а интерфейс может наследоваться только от других интерфейсов. Абстрактный класс может сожержать реализованные методы. Например мы создаём класс смартфон в котором есть камера, мы наследуем методы от род. класса телефон и наследуем интерфейс камера. так мы соблюдаем правило ромба и не создаём ошибку
5) super нужен для обращению к конструктору родительского класса. На лекции нам объясняли так: например у нас есть игра в которой реализован класс player в нем реализованы методы: name,  hp - колличество здоровья игрока, damage - урон и например batttlecry - боевой клич. Мы хотим создать наследуемый класс healerplayer в котором реализуем новый метод heal. Супер мы используем для наслдедования от player методов name, hp, damage и battlecry. Сделаем это так: 
public HealerPlayer(String name, Int hp, Int damage, String battleCry){
	super(name, hp, damage, battleCry);
	heal = 5;
}
типо того)

 4) динамический полиморфизм позволяем вызывать метод при выполнении программы, а статический позволяет вызвать при компиляции кода этой программы.

3) насколько я помню обычно в пример приводят двигатель автомобиля, но М. М. Абрамский сказал что это плохой пример, но других я к сожалению не помню. Композиция это отношение между классами при наследовании, когда объект (двигатель) принадлежит опрелелённому автомобилю и при этом не может принадлежать другому.